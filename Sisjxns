<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Info Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
        }
        /* Custom scrollbar for result display */
        .scrollable-content::-webkit-scrollbar {
            width: 8px;
        }
        .scrollable-content::-webkit-scrollbar-track {
            background: #e2e8f0; /* Lighter track */
            border-radius: 10px;
        }
        .scrollable-content::-webkit-scrollbar-thumb {
            background: #94a3b8; /* Darker thumb */
            border-radius: 10px;
        }
        .scrollable-content::-webkit-scrollbar-thumb:hover {
            background: #64748b; /* Even darker on hover */
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4 text-lg">
    <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md border border-gray-200">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-6" id="appTitle">Food Information App</h1>

        <div class="mb-6">
            <label for="foodNameInput" class="block text-gray-700 text-lg font-semibold mb-2" id="inputLabel">Enter Food Name:</label>
            <input
                type="text"
                id="foodNameInput"
                placeholder="e.g., Apple, Chicken Breast, Oatmeal"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 text-lg"
            >
        </div>

        <button
            id="searchButton"
            class="w-full bg-blue-600 text-white py-3 rounded-md font-semibold hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 ease-in-out shadow-md hover:shadow-lg text-lg"
        >
            Get Info
        </button>

        <div id="loadingIndicator" class="mt-6 text-center text-blue-600 font-medium hidden">
            <div class="flex items-center justify-center space-x-2">
                <svg class="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span id="loadingText">Loading...</span>
            </div>
        </div>

        <div id="resultsDisplay" class="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-md shadow-inner min-h-[150px] max-h-[400px] overflow-y-auto scrollable-content text-gray-800 text-xl leading-relaxed whitespace-pre-wrap">
            <p class="text-gray-500 italic" id="initialMessage">Enter a food name above and click "Get Info" to see details.</p>
        </div>
    </div>

    <script type="module">
        // Get references to HTML elements
        const foodNameInput = document.getElementById('foodNameInput');
        const searchButton = document.getElementById('searchButton');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const resultsDisplay = document.getElementById('resultsDisplay');
        const appTitle = document.getElementById('appTitle'); // Added ID
        const inputLabel = document.getElementById('inputLabel'); // Added ID
        const loadingText = document.getElementById('loadingText'); // Added ID
        const initialMessage = document.getElementById('initialMessage'); // Added ID

        // Function to detect if the input is primarily Chinese
        function isChinese(text) {
            // This is a basic check. A more robust solution might use a language detection library.
            // Checks for a significant number of Chinese characters.
            const chineseCharCount = (text.match(/[\u4e00-\u9fff]/g) || []).length;
            return chineseCharCount > (text.length * 0.5); // If more than 50% are Chinese characters
        }

        // Function to update UI text based on language
        function updateUIText(isChineseInput) {
            if (isChineseInput) {
                appTitle.innerText = "食物信息查詢";
                inputLabel.innerText = "輸入食物名稱:";
                foodNameInput.placeholder = "例如：蘋果, 雞胸肉, 燕麥片";
                searchButton.innerText = "獲取信息";
                loadingText.innerText = "加載中...";
                initialMessage.innerText = "在上方輸入食物名稱，然後點擊“獲取信息”查看詳細信息。";
                // Ensure results display for previous searches also adapts if desired, though current design clears it.
            } else {
                appTitle.innerText = "Food Information App";
                inputLabel.innerText = "Enter Food Name:";
                foodNameInput.placeholder = "e.g., Apple, Chicken Breast, Oatmeal";
                searchButton.innerText = "Get Info";
                loadingText.innerText = "Loading...";
                initialMessage.innerText = "Enter a food name above and click \"Get Info\" to see details.";
            }
        }

        // Function to handle the search button click
        async function handleSearch() {
            const foodName = foodNameInput.value.trim();
            const isChineseRequest = isChinese(foodName);

            // Update UI texts immediately based on detected input language
            updateUIText(isChineseRequest);

            if (!foodName) {
                resultsDisplay.innerHTML = isChineseRequest ?
                    '<p class="text-red-500 font-medium">請輸入食物名稱。</p>' :
                    '<p class="text-red-500 font-medium">Please enter a food name.</p>';
                return;
            }

            // Show loading indicator and clear previous results
            loadingIndicator.classList.remove('hidden');
            resultsDisplay.innerHTML = ''; // Clear content
            searchButton.disabled = true; // Disable button during loading

            try {
                // Construct the prompt for the LLM based on language
                let prompt;
                if (isChineseRequest) {
                    prompt = `提供關於 "${foodName}" 的簡短和精確信息，包括其成分、對高血壓、糖尿病、高膽固醇、心臟病或腎臟病患者是否適宜，以及關鍵營養事實（卡路里、蛋白質、碳水化合物、脂肪、維生素、礦物質）。請使用清晰的標題，例如“成分”和“營養事實”。`;
                } else {
                    prompt = `Provide short and precise information about the ingredients, if it is good for people with high blood pressure or diabetes or high cholesterol or heart disease or kidney disease, and key nutritional facts (calories, protein, carbs, fat, vitamins, minerals) for "${foodName}". Please format the output clearly with headings for "Ingredients" and "Nutritional Facts".`;
                }

                // OpenRouter API configuration
                const encodedkey = "c2stb3ItdjEtYWU2ZmYwMzIxZDkyYWI0NjU4ZjdjNDI5MTJmMmI0ZTRmZjNkMTc0NzBiY2JjMGI5M2I5MzQ5MGIwZWNiM2ZiZg==";
                const apiKey = atob(encodedkey);
                const apiUrl = `https://openrouter.ai/api/v1/chat/completions`; // OpenRouter endpoint
                const model = "google/gemma-3-27b-it:free"; // You can choose other models available on OpenRouter

                const payload = {
                    model: model,
                    messages: [
                        { role: "user", content: prompt }
                    ]
                };

                // Make the fetch call to the OpenRouter API
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`, // OpenRouter uses Bearer token in Authorization header
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`API error: ${response.status} - ${errorData.error.message || response.statusText}`);
                }

                const result = await response.json();

                // Check if the response has content from OpenRouter
                if (result.choices && result.choices.length > 0 && result.choices[0].message && result.choices[0].message.content) {
                    const generatedText = result.choices[0].message.content;
                    resultsDisplay.innerText = generatedText; // Display the generated text
                } else {
                    resultsDisplay.innerHTML = isChineseRequest ?
                        '<p class="text-red-500 font-medium">未能找到信息或OpenRouter返回格式異常。請重試。</p>' :
                        '<p class="text-red-500 font-medium">No information found or unexpected response format from OpenRouter. Please try again.</p>';
                }

            } catch (error) {
                console.error("Error fetching food information from OpenRouter:", error);
                resultsDisplay.innerHTML = isChineseRequest ?
                    `<p class="text-red-500 font-medium">發生錯誤：${error.message}。請檢查您的API密鑰或重試。</p>` :
                    `<p class="text-red-500 font-medium">An error occurred: ${error.message}. Please check your API key or try again.</p>`;
            } finally {
                // Hide loading indicator and re-enable button
                loadingIndicator.classList.add('hidden');
                searchButton.disabled = false;
            }
        }

        // Add event listener to the search button
        searchButton.addEventListener('click', handleSearch);

        // Allow pressing Enter key to trigger search
        foodNameInput.addEventListener('keypress', (event) => { // Changed 'ent' to 'event'
            if (event.key === 'Enter') {
                handleSearch();
            }
        });

        // Optional: Update UI language when input changes to give immediate feedback
        foodNameInput.addEventListener('input', () => {
            const foodName = foodNameInput.value.trim();
            updateUIText(isChinese(foodName));
        });

        // Initialize UI text based on default or assumed language (e.g., English)
        updateUIText(false);
    </script>
</body>
</html>
